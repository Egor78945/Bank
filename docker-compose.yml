version: '3.9'

networks:
  test:
    driver: bridge

services:
  service-discovery:
    container_name: ${SERVICE_DISCOVERY_APPLICATION_NAME}
    build:
      context: ./service-discovery
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
        SERVICE_DISCOVERY_PORT: ${SERVICE_DISCOVERY_PORT}
    env_file:
      - .env
    restart: on-failure
    ports:
      - ${SERVICE_DISCOVERY_PORT}:${SERVICE_DISCOVERY_PORT}
    networks:
      - test

  api-gateway-service:
    container_name: ${API_GATEWAY_SERVICE_APPLICATION_NAME}
    build:
      context: ./api-gateway-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
        API_GATEWAY_SERVICE_PORT: ${API_GATEWAY_SERVICE_PORT}
    env_file:
      - .env
    restart: on-failure
    depends_on:
      - service-discovery
    ports:
      - ${API_GATEWAY_SERVICE_PORT}:${API_GATEWAY_SERVICE_PORT}
    networks:
      - test

  user-database-service:
    container_name: ${USER_DATABASE_SERVICE_APPLICATION_NAME}
    build:
      context: ./user-database-service
      dockerfile: Dockerfile
      args:
        POSTGRES_USER_DATABASE_NAME: ${POSTGRES_USER_DATABASE_NAME}
        POSTGRES_USER_HOST: ${POSTGRES_USER_HOST}
        POSTGRES_USER_PORT_INNER: ${POSTGRES_USER_PORT_INNER}
        POSTGRES_USER_USERNAME: ${POSTGRES_USER_USERNAME}
        POSTGRES_USER_PASSWORD: ${POSTGRES_USER_PASSWORD}
    env_file:
      - .env
    depends_on:
      - postgres-users
      - api-gateway-service
    restart: on-failure
    networks:
      - test

  postgres-users:
    container_name: ${POSTGRES_USER_HOST}
    image: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_USER_DATABASE_NAME}
      - POSTGRES_USER=${POSTGRES_USER_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_USER_PASSWORD}
    restart: on-failure
    ports:
      - ${POSTGRES_USER_PORT_OUTER}:${POSTGRES_USER_PORT_INNER}
    networks:
      - test

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    container_name: ${KEYCLOAK_SERVER_HOST}
    command:
      - start-dev
      - --import-realm
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KEYCLOAK_ADMIN_NAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://${POSTGRES_USER_HOST}:${POSTGRES_USER_PORT_INNER}/${POSTGRES_USER_DATABASE_NAME}
      - KC_DB_USERNAME=${POSTGRES_USER_USERNAME}
      - KC_DB_PASSWORD=${POSTGRES_USER_PASSWORD}
      - KC_HTTP_PORT=${KEYCLOAK_SERVER_PORT}
    volumes:
      - ./keycloak/configuration/realm/bank/realm-config.json:/opt/keycloak/data/import/realm-config.json:ro
    ports:
      - ${KEYCLOAK_SERVER_PORT}:${KEYCLOAK_SERVER_PORT}
    restart: on-failure
    depends_on:
      - postgres-users
    networks:
      - test

  user-account-service:
    build:
      context: ./user-account-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
    env_file:
      - .env
    ports:
      - ${USER_ACCOUNT_SERVICE_PORT}:${USER_ACCOUNT_SERVICE_PORT}
    restart: on-failure
    networks:
      - test
    depends_on:
      - user-database-service
      - keycloak

  authentication-service:
    build:
      context: ./authentication-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
    env_file:
      - .env
    restart: on-failure
    networks:
      - test
    depends_on:
      - user-database-service
      - keycloak

  card-service:
    build:
      context: ./card-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
    env_file:
      - .env
    restart: on-failure
    networks:
      - test
    depends_on:
      - user-database-service

  transaction-service:
    build:
      context: ./transaction-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: ${JAVA_VERSION}
    env_file:
      - .env
    restart: on-failure
    depends_on:
      - kafka2
      - card-service
    networks:
      - test

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_SERVER_PORT_INNER}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - ${ZOOKEEPER_SERVER_PORT_OUTER}:${ZOOKEEPER_SERVER_PORT_INNER}
    restart: always
    networks:
      - test

  kafka1:
    image: confluentinc/cp-kafka:latest
    ports:
      - ${KAFKA1_SERVER_PORT_OUTER}:${KAFKA1_SERVER_PORT_OUTER}
    environment:
      KAFKA_BROKER_ID: ${KAFKA1_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_SERVER_PORT_INNER}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:${KAFKA1_SERVER_PORT_INNER},PLAINTEXT_HOST://localhost:${KAFKA1_SERVER_PORT_OUTER}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_SERVER_REPLICATION_FACTOR}
    restart: on-failure
    depends_on:
      - zookeeper
    networks:
      - test

  kafka2:
    image: confluentinc/cp-kafka:latest
    ports:
      - ${KAFKA2_SERVER_PORT_OUTER}:${KAFKA2_SERVER_PORT_OUTER}
    environment:
      KAFKA_BROKER_ID: ${KAFKA2_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_SERVER_PORT_INNER}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:${KAFKA2_SERVER_PORT_INNER},PLAINTEXT_HOST://localhost:${KAFKA2_SERVER_PORT_OUTER}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_SERVER_REPLICATION_FACTOR}
    restart: on-failure
    depends_on:
      - kafka1
    networks:
      - test

